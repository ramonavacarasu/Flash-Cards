package flashcards;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*;

public class Main {

    static Scanner scanner = new Scanner(System.in);

    static ArrayList<String> listCards = new ArrayList<>();
    static ArrayList<String> listDef = new ArrayList<>();
    static ArrayList<String> sessionLog = new ArrayList<>();

    static String card = null;
    static String cardDef = null;
    static String exportFile = "";

    static LinkedHashMap<String, String> flashCards = new LinkedHashMap<>();
    static LinkedHashMap<String, String> flashCardsfromConsole = new LinkedHashMap<>();
    static LinkedHashMap<String, Integer> hardestCard = new LinkedHashMap<>();

    static boolean exit = false;

    public static void main(String[] args) {

        for (int i = 0; i < args.length; i++) {
            switch (args[i]) {
                case "-import":
                    importCardsFromFile(args[i + 1]);
                    break;
                case "-export":
                    exportFile = args[i + 1];
                    break;
                default:
            }
        }
        actionCards();
    }

    public static void actionCards() {
        while (!exit) {
            System.out.println("\n" + "Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):");
            saveToLog("\n" + "Input the action (add, remove, import, export, ask, exit, log, hardest card, reset stats):");
            String action = scanner.nextLine();
            saveToLog(action);
            switch (action) {
                case "add":
                    addFleshCard();
                    break;
                case "remove":
                    removeCard();
                    break;
                case "import":
                    readFile();
                    break;
                case "export":
                    writeFile();
                    break;
                case "log":
                    saveActivityLog();
                    break;
                case "ask":
                    askToPlay();
                    break;
                case "hardest card":
                    countMistakes();
                    break;
                case "reset stats":
                    resetStats();
                    break;
                case "exit":
                    System.out.println("Bye bye!");
                    saveToLog("Bye bye!");
                    if (!"".equals(exportFile)) {
                        exportCardsToFile(exportFile);
                    }
                    exit = true;
            }
        }
    }

    public static void resetStats() {
        hardestCard.clear();
        System.out.println("Card statistics has been reset.");
        saveToLog("Card statistics has been reset.");
    }

    public static void saveActivityLog() {

        System.out.println("File name:");
        saveToLog("File name:");
        String filePath = scanner.nextLine();
        saveToLog(filePath);

        File file = new File(filePath);
        try (PrintWriter printWriter = new PrintWriter(file)) {
            printWriter.println("START LOG:");
            for (String logEntry : sessionLog) {
                printWriter.println(logEntry);
            }
            printWriter.println("\n" + "END OF LOG!");
            printWriter.close();

            System.out.println("The log has been saved.");
            saveToLog("The log has been saved.");

        } catch (IOException e) {
            System.out.println("An exception occurred: " + e.getMessage());
            saveToLog("An exception occurred: " + e.getMessage());
        }
    }

    public static void saveToLog(String s) {
        sessionLog.add(s);
    }


    public static String iterateOverHCards() {

        ArrayList<String> hardCard = new ArrayList<>();
        StringBuilder sb = new StringBuilder();

        for (String name : hardestCard.keySet()) {
            hardCard.add((char) 34 + name + (char) 34);
        }

        if (hardCard.size() == 1) {
            return hardCard.get(0);
        } else {
            for (String s : hardCard) {
                sb.append(s).append(", ");
            }
            String str = sb.toString();
            return str.substring(0, str.length() - 2);
        }

    }

    public static int iterateOverHCardsValue() {

        int hCardValue = 0;

        for (int v : hardestCard.values()) {
            if (v > hCardValue) {
                hCardValue = v;
            }
            return hCardValue;
        }
        return 0;
    }

    public static void countMistakes() {

        if (hardestCard.size() == 0) {
            System.out.println("There are no cards with errors.");
            saveToLog("There are no cards with errors.");
        } else if (hardestCard.size() == 1) {
            System.out.println("The hardest card is " + iterateOverHCards()
                    + ". You have " + iterateOverHCardsValue() + " errors answering it.");
            saveToLog("The hardest card is " + iterateOverHCards()
                    + ". You have " + iterateOverHCardsValue() + " errors answering it.");
        } else {
            System.out.println("The hardest card are " + iterateOverHCards() +
                    ". You have " + iterateOverHCardsValue() + " errors answering them.");
            saveToLog("The hardest card are " + iterateOverHCards() +
                    ". You have " + iterateOverHCardsValue() + " errors answering them.");
        }
    }

    public static void readFile() {
        System.out.println("File name:");
        String pathFile = scanner.nextLine();
        importCardsFromFile(pathFile);
        saveToLog(pathFile);
    }
    public static void importCardsFromFile(String fileName) {

            File file = new File(fileName);
            String cardInput, definition, errors;
            int counter = 0;

        try (Scanner scanner2 = new Scanner(file)) {
            while (scanner2.hasNext()) {
                cardInput = scanner2.nextLine();
                definition = scanner2.nextLine();
                errors = scanner2.nextLine();

                for (String f : flashCards.keySet()) {
                    if (cardInput.equals(f)) {
                        flashCards.remove(f);
                        break;
                    }
                }

                flashCards.put(cardInput, definition);
                counter++;
                hardestCard.put(cardInput, Integer.parseInt(errors));

            }
            System.out.println(counter + " cards have been loaded.");
            saveToLog(counter + " cards have been loaded.");
        } catch (FileNotFoundException e) {
            System.out.println("File not found.");
            saveToLog("File not found.");
        }
    }

    public static void writeFile() {

        System.out.println("File name:");
        String filePath = scanner.nextLine();
        exportCardsToFile(filePath);
        saveToLog(filePath);

    }
    public static void exportCardsToFile(String nume) {

        File file = new File(nume);

        try (PrintWriter printWriter = new PrintWriter(file)) {
            for (String iterate : flashCards.keySet()) {
                printWriter.println(iterate);
                printWriter.println(flashCards.get(iterate));
                printWriter.println(hardestCard.get(iterate));
            }
            System.out.println(flashCards.size() + " cards have been saved.");
            saveToLog(flashCards.size() + " cards have been saved.");
        } catch (Exception e) {
            System.out.println("File not found.");
            saveToLog("File not found.");
        }
    }


    public static void removeCard() {

        System.out.println("The card:");
        saveToLog("The card:");
        String toRemove = scanner.nextLine();
        saveToLog(toRemove);

        if (flashCards.containsKey(toRemove)) {
            flashCards.remove(toRemove);
            listCards.remove(toRemove);
            listDef.remove(flashCards.get(toRemove));
            hardestCard.remove(toRemove);
            System.out.println("The card has been removed.");
            saveToLog("The card has been removed.");
        } else if (!flashCards.containsKey(toRemove)) {
            System.out.println("Can't remove \"" + toRemove + "\": there is no such card.");
            saveToLog("Can't remove \"" + toRemove + "\": there is no such card.");
        }
    }

    public static void addFleshCard() {

        System.out.println("The card:");
        saveToLog("The card:");
        card = scanner.nextLine();
        saveToLog(card);

        if (listCards.contains(card)) {
            System.out.println("The card \"" + card + "\" already exists.");
            saveToLog("The card \"" + card + "\" already exists.");
            actionCards();
        } else if (!listCards.contains(card)) {
            listCards.add(card);
            System.out.println("The definition of the card:");
            saveToLog("The definition of the card:");
            cardDef = scanner.nextLine();
            saveToLog(cardDef);
            if (listDef.contains(cardDef)) {
                System.out.println("The definition \"" + cardDef + "\" already exists.");
                saveToLog("The definition \"" + cardDef + "\" already exists.");
                actionCards();
            } else if (!listDef.contains(cardDef)) {
                listDef.add(cardDef);
                flashCards.put(card, cardDef);
                flashCardsfromConsole.put(card, cardDef);
                System.out.println("The pair (\"" + card + "\":\"" + cardDef + "\") has been added.");
                saveToLog("The pair (\"" + card + "\":\"" + cardDef + "\") has been added.");
            }
        }
    }

    public static void askToPlay() {

        System.out.println("How many times to ask?");
        saveToLog("How many times to ask?");
        String nr = scanner.nextLine();
        int howManyAsk = Integer.parseInt(nr);
        saveToLog(nr);

        for (int i = 0; i < howManyAsk; i++) {

            ArrayList<String> listC = new ArrayList<>(flashCards.keySet());

            String c = listC.get(new Random().nextInt(flashCards.size()));
            String d = flashCards.get(c);

            System.out.println("Print the definition of \"" + c + "\":");
            saveToLog("Print the definition of \"" + c + "\":");
            String answer = scanner.nextLine();
            saveToLog(answer);
            if (answer.equals(d)) {
                System.out.println("Correct answer.");
                saveToLog("Correct answer.");
            } else if (flashCards.containsValue(answer)) {
                for (Map.Entry<String, String> entry : flashCards.entrySet()) {
                    String key = entry.getKey();
                    String value = entry.getValue();
                    if (answer.equals(value)) {
                        System.out.println("Wrong answer. The correct one is \"" + d + "\", " +
                                "you've just written the definition of \"" + key + "\".");
                        saveToLog("Wrong answer. The correct one is \"" + d + "\", " +
                                "you've just written the definition of \"" + key + "\".");
                        if (!hardestCard.containsKey(c)) {
                            hardestCard.put(c, 1);
                        } else if (hardestCard.containsKey(c)) {
                            hardestCard.put(c, hardestCard.get(c) + 1);
                        }
                    }
                }
            } else {
                System.out.println("Wrong answer. The correct one is \"" + d + "\".");
                saveToLog("Wrong answer. The correct one is \"" + d + "\".");
                if (!hardestCard.containsKey(c)) {
                    hardestCard.put(c, 1);
                } else if (hardestCard.containsKey(c)) {
                    hardestCard.put(c, hardestCard.get(c) + 1);
                }
            }
        }
    }
}


